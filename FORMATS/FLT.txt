/* Copyright (C) 2003, 2004
     National Institute of Advanced Industrial Science and Technology (AIST)
     Registration Number H15PRO112
   See the end for copying conditions.  */

/***en

@page mdbFLT Font Layout Table

@section flt-description DESCRIPTION

For simple scripts, the rendering engine converts character codes into
glyph codes one by one by consulting the encoding of each selected
font.  In order to render text that requires complicated layout
(e.g. Thai and Indic scripts), however, one to one conversion is not
sufficient.  A sequence of characters may have to be drawn as a single
ligature.  Some glyphs may have to be drawn at 2-dimensionally shifted
positions.

The m17n library uses Font Layout Tables (FLTs for short) to handle
those complicated scripts.  The layout engine interprets an FLT and
converts a character sequence into a glyph sequence that is ready to
be passed to the rendering engine.

An FLT supplies information to extract a grapheme cluster from a
character sequence and to reorder the characters in the cluster, in
addition to information found in OpenType Layout Tables (CMAP, GSUB,
and GPOS).

An FLT is a cascade of one or more conversion stages.  In each stage,
a sequence of characters or intermediate code is converted into
another sequence to be read in the next stage.  The length of
sequences may differ from stage to stage.

When the m17n layout engine draws text, it first determines a font and
an FLT for each character in the text.  The layout engine divides the
text into subsequences of characters that use the same font and FLT,
and it handles each subsequence, one by one, by passing it to the
first stage of the FLT determined.

The subsequence currently under conversion is called @e the @e current
@e run.

Each element in a subsequence has the following integer
specifications.

<ul>
<li> code

In the first conversion stage, @c code is the character code in the
original character sequence.  In the last stage, it is the glyph code
passed to the rendering engine.  In other cases, it is an intermediate
glyph code.

<li> category

Character/intermediate glyph codes that require similar handling in a
stage are grouped into a category.  @c category is a category code
defined in the @c &lt;category-table&gt; of the current stage, or
defined in the one of the former stages and not overwritten by later
stages.

<li> combining-spec

In the first conversion stage, the value is zero. If nonzero, it
specifies how to combine this (intermediate) glyph with the previous
one. 

<li> left-padding-flag

In the first conversion stage, the value is zero.  If nonzero, it
instructs the rendering function to insert a padding space before this
(intermediate) glyph so that the glyph does not overlap with the
previous one.

<li> right-padding-flag

In the first conversion stage, the value is zero.  If nonzero, it
instructs the rendering function to insert a padding space after this
(intermediate) glyph so that the glyph does not overlap with the next
one.

</ul>

When a @e run is passed to a stage, if the stage has a @c
category-table, the category of each glyph in the current run is
updated.  If there is a glyph that has no category, the current run
ends before that glyph.  Then, the default values of code-offset,
combining-spec, and left-padding-flag of this stage are initialized to
zero.  After these setups, the initial conversion action of the stage
is applied to the current run and a new (intermediate) glyph sequence
is produced.  The new current run is then passed to the next stage or
the rendering engine.


@section flt-syntax FLT STAGES and CATEGORIES

The following defines a schema for a FLT, written in RelaxNG.  (This
schema file can be found at m17n-db-xml/FLT/flt.rng.) 

@verbatim
<?xml version="1.0" encoding="utf-8"?>

<grammar 
	 datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
         xmlns:xi="http://www.w3.org/1999/XML/xinclude"
	 xmlns="http://relaxng.org/ns/structure/1.0"
	 ns="http://www.m17n.org/FLT">
<start>
  <element name="font-layouter">
    <attribute name="key0"><data type="string"/></attribute>
    <attribute name="key1"><data type="string"/></attribute>
    <optional><ref name="font"/></optional>
    <optional>
      <element name="m17n-version">
	<data type="string"><param name="pattern">[0-9]+\.[0-9]+\.[0-9]+</param></data>
      </element>
    </optional>
    <ref name="first-stage"/>
    <zeroOrMore><ref name="stage"/></zeroOrMore>
  </element>
</start>

<define name="first-stage">
  <element name="first-stage">
    <ref name="category-table"/>
    <ref name="generator"/>
  </element>
</define>

<define name="stage">
  <element name="stage">
    <optional><ref name="category-table"/></optional>
    <ref name="generator"/>
  </element>
</define>

@endverbatim

The attributes "key0" and "key1" are used to find an FLT from the m17n
database.  The element &lt;first-stage&gt; must have a
&lt;category-table&gt;.  An FLT can convert characters defined in the
&lt;category-table&gt; of its &lt;first-stage&gt;.

@verbatim

<define name="category-table">
  <element name="category-table">
    <oneOrMore>
      <element name="category">
	<choice>
	  <attribute name="code"><ref name="glyph-code"/></attribute>
	  <group><attribute name="from-code"><ref name="glyph-code"/></attribute>
	         <attribute name="to-code"><ref name="glyph-code"/></attribute>
	  </group>
	</choice>
	<attribute name="category-value">
	  <data type="string"><param name="pattern">[a-zA-Z]</param></data>
	</attribute>
      </element>
    </oneOrMore>
  </element>
</define>

<define name="glyph-code">
  <choice>
    <data type="string"><param name="pattern">[0#]x[0-9a-fA-F]{1,6}</param></data>
    <data type="string"><param name="pattern">\?.</param></data>
  </choice>
</define>

@endverbatim

The element &lt;category-table&gt; declares cageories of characters
that can be handled in a stage.  Each &lt;category&gt; element assigns
the value of the attribute "category-value" to a glyph whose code is
the value of the attribute "code", or a range of glyphs whose code 
falls betwee the value of the attribute "from-code" and that of "to-code".


@verbatim
<define name="generator">
  <element name="generator">
    <ref name="action"/>
    <zeroOrMore>
      <element name="macro-definition">
	<attribute name="macro-ID"><data type="ID"></data></attribute>
	<oneOrMore><ref name="action"/></oneOrMore>
      </element>
    </zeroOrMore>
  </element>
</define>
@endverbatim

The element &lt;generator&gt; specifies the action applied to
character/intermediate glyph code sequence passed to the stage.  The
&lt;macro-definition&gt; define macros used in the action.  A macro is
exapanded to the sequence of the correponding actions.

@section flt-action FLT ACTIONS

This section describes &lt;action&gt;s.  Each &lt;action&gt; specifies
glyphs to be consumed and glyphs to be produced.  When some glyphs are
consumed, they are taken away from the current run.  An action may
fail in some explicitly described condition.

@verbatim
    <element name="direct-code">
      <attribute name="glyph-code"><ref name="glyph-code"/></attribute>
    </element>
@endverbatim

The element &lt;direct-code&gt; consumes no glyph and produces a glyph
that has the following specifications:

<ul>
<li> code : @c glyph-code plus the default code-offset
<li> combining-spec : default value
<li> left-padding-flag : default value
<li> right-padding-flag : zero
</ul>

After having produced the glyph, the default code-offset,
combining-spec, and left-padding-flag are all reset to zero.

@verbatim
    <element name="copy-glyph"><empty/></element>
@endverbatim

The element &lt;copy-glyph&gt; consumes the first glyph in the current
run and produces the same glyph.  It fails if the current run is
empty.

@verbatim
    <element name="repeat"><empty/></element>
@endverbatim

The element &lt;repeat&gt; repeatedly executes the previous action.  If
the previous action fails, this action does nothing and fails.

@verbatim
    <element name="start-cluster"><empty/></element>
@endverbatim
The element &lt;start-cluster&gt; specifies the start of a grapheme cluster.

@verbatim
    <element name="end-cluster"><empty/></element>
@endverbatim

The element &lt;end-cluster&gt; specifies the end of a grapheme cluster.

@verbatim
    <element name="left-padding-flag"><empty/></element>
@endverbatim

The element &lt;left-padding-flag&gt; sets the default
left-padding-flag to 1.  No glyph is consumed.  No glyph is produced.

@verbatim
    <element name="right-padding-flag"><empty/></element>
@endverbatim

The element &lt;right-padding-flag&gt; changes the right-padding-flag
of the lastly generated glyph to 1.  No glyph is consumed.  No glyph
is produced.

@verbatim
    <element name="separator"><empty/></element>
@endverbatim

The element &lt;separator&gt; consumes no glyph and produces a special
glyph whose category is ' ' and other attributes are zero.  This
special glyph can be produced by this action only.

@verbatim
    <element name="regexp-block">
      <attribute name="regexp"/>
      <zeroOrMore><ref name="action"/></zeroOrMore>
    </element>
@endverbatim

The value of the attribute "regexp" is a regular expression that
should match the sequence of categories of the current run.  If a
match is found, this action executes &lt;action&gt;s temporarily
limiting the current run to the matched part.  This action consumes the
matched part.

Parenthesized subexpressions, if any, are recorded to be used in the
&lt;match-block&gt; element in the &lt;action&gt;s.

If no match is found, this action fails.

@verbatim

    <element name="match-block">
      <attribute name="match-index"><data type="integer"/></attribute>
      <zeroOrMore><ref name="action"/></zeroOrMore>
    </element>      

@endverbatim

The value of the attribute "match-index" is an integer specifying a
parenthesized subexpression recorded by the previous
&lt;regexp-bloack&gt; element.  If such a subexpression exists, this
action executes &lt;action&gt;s temporarily limiting the current run to
the subsequence that matches with the subexpression.  This action
consumes the matched subsequence.

If the specified subexpression does not exist, this action fails.

If this is the first action of the stage, the value of the attribute
"match-index" must be 0, and it matches the whole current run.

@verbatim
    <element name="subst-block">
      <choice>
	<element name="source-pattern">
	  <list><oneOrMore><ref name="glyph-code"/></oneOrMore></list>
	</element>
	<element name="code-range">
	  <attribute name="from-code"><ref name="glyph-code"/></attribute>
	  <attribute name="to-code"><ref name="glyph-code"/></attribute>
	</element>
      </choice>
      <zeroOrMore><ref name="action"/></zeroOrMore>
    </element>
@endverbatim

If the sequence of codes of the current run matches the element
&lt;source-pattern&gt; or the element &lt;code-range&gt;, this action
executes &lt;action&gt;s, temporarily limiting the current run to the
matched part. This action consumes the matched part.

The element &lt;source-pattern&gt; specifies a sequence of glyph codes
to be matched.  In this case, this action resets the default
code-offset to zero.  The element &lt;code-range&gt; specifies a range
of codes that should match the first glyph code of the code sequence.
In this case, this action sets the default code-offset to the first
glyph code minus the value of the "from-code" attribute.

If no match is found, this action fails.  

@verbatim
    <element name="cond-block">
      <oneOrMore><ref name="action"></ref></oneOrMore>
    </element>
@endverbatim

This action sequentially executes &lt;action&gt;s until one succeeds.
If no succeeds, this action fails.  Otherwise, it succeeds.

@verbatim
    <element name="font-facility-block">
      <choice>
	<ref name="font"/>
	<element name="characters">
	  <list><oneOrMore><ref name="glyph-code"/></oneOrMore></list>
	</element>
      </choice>
      <zeroOrMore><ref name="action"/></zeroOrMore>
    </element>
@endverbatim

The element &lt;font&gt;, referred in the line 3, supplies font
specifications.  If the current font matches with the referred
specification, or has glyphs for the codes listed in the element
&lt;characters&gt;, this action succeeds and executes &lt;action&gt;s.
Otherwise, this action fails.

&lt;font&gt; is defined as follows:

@verbatim
<define name="font">
  <element name="font">
    <optional>
      <optional>
	<attribute name="foundry"><data type="token"/></attribute>
	<attribute name="family"><data type="token"/></attribute>
	<optional>
	  <attribute name="weight"><data type="token"/></attribute>
	  <optional>
	    <attribute name="style"><data type="token"/></attribute>
	    <optional>
	      <attribute name="stretch"><data type="token"/></attribute>
	      <optional>
		<attribute name="adstyle"><data type="token"/></attribute>
	      </optional>
	    </optional>
	  </optional>
	</optional>
      </optional>
      <attribute name="registry"><data type="token"/></attribute>
    </optional>
    <optional>
      <ref name="otf-specification"/>
    </optional>
    <zeroOrMore>
      <element name="lang-specification">
	<data type="token"><param name="minLength">2</param><param name="maxLength">3</param></data>
      </element>
    </zeroOrMore>
  </element>
</define>
@endverbatim

The value of the attribute "foundry" is a symbol representing font
foundry information, e.g. adobe, misc, etc.

The value of the attribute "family" is a symbol representing font
family information, e.g. times, helvetica, etc.

The value of the attribute "weight" is a symbol representing weight
information, e.g. normal, bold, etc.

The value of the attribute "style" is a symbol representing slant
information, e.g. normal, italic, etc.

The value of the attribute "stretch" is a symbol representing width
information, e.g. normal, semicondensed, etc.

The value of the attribute "adstyle" is a symbol representing abstract
font family information, e.g. serif, sans-serif, etc.

The value of the attribute "registry" is a symbol representing
registry information, e.g. iso10646-1, iso8895-1, etc.

@verbatim
    <ref name="otf-specification"/>
@endverbatim

&lt;otf-specification&gt; specifies an instruction to the OTF driver.
It is defined as follows:

<define name="otf-specification">
  <element name="otf">
    <attribute name="script"/>
    <optional><attribute name="langsys"/></optional>
    <optional>
      <element name="gsub-features">
	<choice>
	  <element name="positive-list">
	    <zeroOrMore>
	      <element name="feature">
		<data type="string"><param name="length">4</param></data>
	      </element>
	    </zeroOrMore>
	  </element>
	  <element name="negative-list">
	    <zeroOrMore>
	      <element name="feature">
		<data type="string"><param name="length">4</param></data>
	      </element>
	    </zeroOrMore>
	  </element>
	</choice>
      </element>
    </optional>
    <optional>
      <element name="gpos-features">
	<choice>
	  <element name="positive-list">
	    <zeroOrMore>
	      <element name="feature">
		<data type="string"><param name="length">4</param></data>
	      </element>
	    </zeroOrMore>
	  </element>
	  <element name="negative-list">
	    <zeroOrMore>
	      <element name="feature">
		<data type="string"><param name="length">4</param></data>
	      </element>
	    </zeroOrMore>
	  </element>
	</choice>
      </element>
    </optional>
  </element>
</define>

@endverbatim

Values of the attribute "script", "langsys" and contents of the
"feature" tags must be tag names defined in the OpenType
specification.

The attribute "script" specifies a Script tag name (e.g. deva for
Devanagari).

The attribute "langsys" specifies a Language System tag name.  If this
attribute is omitted, the Default Language System table is used.

The element &lt;gsub-features&gt; has either a &lt;positive-list&gt;
or a &lt;negative-list&gt;.  The &lt;feature&gt; element in each list
specifies a GSUB Feature tag name (not) to apply.  If the element
&lt;positive-list&gt; has no &lt;feature&gt; element, no GSUB feature
is applied.  If the element &lt;negative-list&gt; has no
&lt;feature&gt; element, all GSUB features are applied.

The element &lt;gpos-features&gt; has either a &lt;positive-list&gt;
or a &lt;negative-list&gt;.  The &lt;feature&gt; element in each list
specifies a GPOS Feature tag name (not) to apply.  If the element
&lt;positive-list&gt; has no &lt;feature&gt; element, no GPOS feature
is applied.  If the element "negative-list&gt; has no &lt;feature&gt;
element, all GPOS features are applied.

When the element &lt;otf-specification&gt; appears in a
&lt;font-facility-block", the &lt;positive-list&gt; or
&lt;negative-list&gt; element specifies features that the font must
(not) have.

See the following page for the OpenType specification.\n
    <http://www.microsoft.com/typography/otspec/default.htm>

@verbatim
    <element name="combining-specification">
      <attribute name="v-pos1">
	<choice><value>t</value><value>c</value><value>b</value><value>B</value></choice>
      </attribute>
      <attribute name="v-pos2">
	<choice><value>t</value><value>c</value><value>b</value><value>B</value></choice>
      </attribute>
      <attribute name="h-pos1">
	<choice><value>l</value><value>c</value><value>r</value></choice>
      </attribute>
      <attribute name="h-pos2">
	<choice><value>l</value><value>c</value><value>r</value></choice>
      </attribute>
      <optional>
	    <attribute name="x-direction"><choice><value>right</value><value>left</value></choice></attribute>
	    <optional><attribute name="x-amount"><data type="integer"/></attribute></optional>
      </optional>
      <optional>
	    <attribute name="y-direction"><choice><value>up</value><value>down</value></choice></attribute>
	    <optional><attribute name="y-amount"><data type="integer"/></attribute></optional>
      </optional>
    </element>
@endverbatim

The element &lt;combining-specification&gt; specifies how to combine
the next glyph with the previous one, and sets the default combining
rule to the specification.

The specificaion selects one reference point for each glyph, and
defines how these reference points are placed with regard to each
other when glyphs are drawn.

The attribute "v-pos1", "v-pos2" specifies the vertical positions of
the reference points of the previous and the next glyph, respectively.
Their possible values "t", "c", "B", "b" means the top, center,
baseline, and bottom of the bounding box of the glyph.

The attribute "h-pos1", "h-pos2" specifies the horizontal positions of
the reference points the previous and the next glyph, respectively.
Their possible values "l", "c", "r" means the left, center, and right
of the bounding box of the glyph.

The following figure shows the possible reference points.

@verbatim
                                      v-pos h-pos
                                ----- ----  ----
    0----1----2 <---- top       0     t     l
    |         |                 1     t     c
    |         |                 2     t     r
    |         |                 3     B     l
    9   10   11 <---- center    4     B     c
    |         |                 5     B     r
  --3----4----5-- <-- baseline  6     b     l
    |         |                 7     b     c
    6----7----8 <---- bottom    8     b     r
                                9     c     l
    |    |    |                10     c     c
  left center right            11     c     r
@endverbatim

The left figure shows 12 reference points (numbers 0 to 11) of a
glyph.  The rectangle 0-6-8-2 is the bounding box of the glyph.  The
positions 3, 4, and 5 are on the baseline. 9-11 are on the vertical
center of the box, 0-2 and 6-8 are on the top and on the bottom
respectively.  1, 10, 4, and 7 are on the horizontal center of the
box.

The attribute "x-direction", "x-amount", "y-direction", and "y-amount"
specifies the relative position of these reference points.  If both
"x-direction" and "y-direction" are omitted, the reference points are
on the same position.

The attribute "x-direction" can take "right" or "left" as its value,
meaning that the X position of the reference point of the next glyph
should be shifted to the right or left from the reference point of the
previous glyph.  The attribute "y-direction" can take "up" or "down"
as its value, meaning that the Y position of the reference point of
the next glyph should be shifted upward or downward from the reference
point of the previous glyph.

The attribute "x-amount" or "y-amount" specify amount of the shift,
measured by a percentage of the font size, i.e., if its value is 10,
it means 10% (1/10) of the font size.  When the attribute "x-amount"
or "y-amount" is omitted, the default value 5 is used.

Once the next glyph is combined with the previous one, they are
treated as a single combined glyph.

@verbatim
    <element name="macro-reference">
     <attribute name="macro-ID"><data type="IDREF"/></attribute>
    </element>

@endverbatim

The element &lt;macro-reference&gt; refers to a macro defined in
&lt;macro-definition&gt;.  The attribute "macro-ID" specifies a macro
and this element is exapanded to the sequence of the correponding
rules.

@section flt-context-dependent CONTEXT DEPENDENT BEHAVIOR

So far, it has been assumed that each sequence, which is drawn with a
specific font, is context free, i.e. not affected by the glyphs
preceding or following that sequence.  This is true when sequence S1
is drawn with font F1 while the preceding sequence S0 unconditionally
requires font F0.

@verbatim
  sequence                              S0      S1
  currently used font                   F0      F1
  usable font(s)                        F0      F1
@endverbatim

Sometimes, however, a clear separation of sequences is not possible.
Suppose that the preceding sequence S0 can be drawn not only with F0
but also with F1.

@verbatim
  sequence                              S0      S1
  currently used font                   F0      F1
  usable font(s)                        F0,F1   F1
@endverbatim

In this case, glyphs used to draw the preceding S0 may affect glyph
generation of S1.  Therefore it is necessary to access information
about S0, which has already been processed, when processing S1.
Generation rules in the first stage (only in the first stage) accept a
special regular expression to access already processed parts.

@verbatim
  "RE0 RE1"
@endverbatim

@c RE0 and @c RE1 are regular expressions that match the preceding
sequence S0 and the following sequence S1, respectively.

Pay attention to the space between the two regular expressions.  It
represents the special category ' ' (see above).  Note that the
regular expression above belongs to glyph generation rules using font
F1, therefore not only RE1 but also RE0 must be expressed with the
categories for F1.  This means when the preceding sequence S0 cannot
be expressed with the categories for F1 (as in the first example
above) generation rules having these patterns never match.

@section flt-seealso SEE ALSO

@ref mdbGeneral "mdbGeneral(5)", 
@ref flt-list "FLTs provided by the m17n database"
*/

/* 
Copyright (C) 2003, 2004
  National Institute of Advanced Industrial Science and Technology (AIST)
  Registration Number H15PRO112

This file is part of the m17n database; a sub-part of the m17n
library.

The m17n library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

The m17n library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the m17n library; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA.
*/
