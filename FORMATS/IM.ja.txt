/* Copyright (C) 2003, 2004, 2005, 2009
     National Institute of Advanced Industrial Science and Technology (AIST)
     Registration Number H15PRO112
   See the end for copying conditions.  */

/***ja

@page mdbIM インプットメソッド

@section im-description 説明

m17n ライブラリは、m17n データベースから動的にロードできる入力メソッド
ドライバを提供している。(@ref m17nInputMethod 参照。 @latexonly
(P.\pageref{group__m17nInputMethod}) @endlatexonly).

ここでは入力メソッド定義のデータフォーマットを説明する。

@section im-format 文法と意味

以下に RelaxNG で書かれた入力メソッド定義用スキーマを示す。（このファイ
ルは m17n-db-xml/MIMNEW/mimnew.rng にある。またこのスキーマは、基本的な
表現や項を定義する m17n-db-xml/MIMNEW/expr.rng を継承して利用する。）

@verbatim

<?xml version="1.0" encoding="utf-8"?>

<grammar 
	 datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
         xmlns:xi="http://www.w3.org/1999/XML/xinclude"
	 xmlns="http://relaxng.org/ns/structure/1.0"
	 ns="http://www.m17n.org/MIM">

<include href="expr.rng"/>

<start>
  <element name="input-method">
    <ref name="im-declaration"/>
    <ref name="description">

    <optional><element name="title"><data type="string"/></element></optional>
    <optional><ref name="variable-list"/></optional>
    <optional><ref name="command-list"/></optional>
    <optional><ref name="module-list"/></optional>
    <optional><ref name="macro-list"/></optional>

    <optional><ref name="map-list"/></optional>
    <optional><ref name="state-list"/></optional>
  </element>
</start>

@endverbatim

入力メソッドのトップレベルノードは &lt;input-method&gt; というタグを持つ。

&lt;description&gt; の詳細については @ref expr を参照。

&lt;title&gt; エレメントの内容は、この入力メソッドが有効な時スクリーン
上に表示されるテキストである。

#if EXAMPLE_CODE
<input-method xmlns="http://www.m17n.org/MIM">
  <tags>
    <language>bo</language>
    <name>ewts</name>
  </tags>
  <description>Tibetan input method based on EWTS.
This implementation is based on THDL Extended Wylie Transliteration Scheme
Version 2.0 &lt;http://www.thdl.org/collections/langling/ewts/ewts.php&gt;.</description>
  <title>ཀ</title>
      :       :
#endif

&lt;variable-list&gt;, &lt;command-list&gt;, &lt;module-list&gt;,
&lt;macro-list&gt; は、それぞれこの入力メソッドで使用される変数、コマン
ド、外部モジュール、マクロを宣言する。入力メソッドは
&lt;variable-list&gt; で宣言されていない変数も使うことができるが、必要
なコマンド、外部モジュール、マクロはここで宣言されなければならない。

&lt;map-list&gt; はこの入力メソッドで使用されるマップを宣言する。 入力
メソッドがそれ単体で利用されることがなく常に他の入力メソッドに読み込ま
れて用いられる場合には省略できる。&lt;state-list&gt; はこの入力メソッド
で使用されるステートを宣言する。 入力メソッドがそれ単体で利用されること
がなく常に他の入力メソッドに読み込まれて用いられる場合には省略できる。
    
@subsection im-declarations 入力メソッドの宣言

@verbatim

<define name="im-declaration">

  <element name="tags">
    <element name="language">
      <choice>
	<value>t</value>
	<data type="string"><param name="pattern">[a-z]{2,3}</param>
	</data>
      </choice>
    </element>
    <choice>
      <group>
	<element name="name"><value>nil</value></element>
	<element name="extra-id"><data type="ID"/></element>
      </group>
      <group>
	<element name="name">
	  <choice>
	    <data type="string"><param name="pattern">[^n][^i][^l]</param></data>
	    <data type="string"><param name="pattern">.{1,2}</param></data>
	    <data type="string"><param name="pattern">....+</param></data>
	  </choice>
	</element>
      <optional>
       <element name="extra-id"><data type="ID"/></element>
     </optional>
   </group>
  </choice>
  </element>

  <optional>
    <element name="m17n-version">
      <data type="string"><param name="pattern">[0-9]+\.[0-9]+\.[0-9]+</param></data>
    </element>
  </optional>
</define>

@endverbatim

&lt;tags&gt; エレメントは、この入力メソッドが対象とする言語や入力メソッ
ド自体の名称を指定する。"global.mimx" という特別なファイルがあり、共通
の変数やコマンドが定義されている。入力メソッドドライバは毎回このファイ
ルをロードし、他の入力メソッドはここで定義された変数やコマンドを継承で
きる。

&lt;language&gt; エレメントの内容が "t" である場合、この入力メソッドは
複数の言語で利用される。それ以外の場合には、エレメントの内容はISO639-1
あるいは ISO639-2 に規定された言語の名称を表す２または３文字のコードで
なくてはならない。

&lt;name&gt; エレメントの内容が "nil" である場合、この入力メソッドは単
独で用いられるものではなく、他の入力メソッドから利用することを想定して
いる。この場合、入力メソッドを特定するために &lt;extra-id&gt; エレメン
トが必須である。&lt;name&gt; エレメントの内容が "nil" でない場合、
&lt;extra-id&gt; エレメントは省略可能(optional)である。

#if EXAMPLE_CODE
  <tags>
    <language>bo</language>
    <name>ewts</name>
  </tags>
#endif

#if EXAMPLE_CODE
  <tags>
    <language>t</language>
    <name>nil</name>
    <extra-id>zh-util</extra-id>
  </tags>
#endif

省略可能なエレメント &lt;m17n-version&gt; は、この入力メソッドが必要と
するm17n ライブラリの最小バージョンを指定する。フォーマットは "X.Y.Z"
であり、X はメジャーバージョン、 Y はマイナーバージョン、Z はパッチレベ
ルを表す。

@subsection im-setups 入力メソッドの設定

@verbatim

<define name="variable-list">
  <element name="variable-list">
    <oneOrMore>
      <ref name="defvar"/>
    </oneOrMore>
  </element>
</define>

@endverbatim

&lt;variable-list&gt; はこの入力メソッドで使用される変数を宣言する。
&lt;defvar&gt; エレメントの詳細については @ref expr を参照。

変数をデフォルト値に初期化したり、"global.mix" から継承した変数をユーザ
がカスタマイズしたりする場合には、ここで宣言しなくてはならない。言い替
えれば、デフォルト値が必要であったり、可能な値が限定されていたりしない
変数は、どこにでも宣言なく現れることができる。

この宣言は二通りに利用される。一つめは新しい変数を導入するためであり、
この場合 &lt;defvar&gt; 中で値を指定しなければならない。もう一つは
"global.mimx" で宣言された変数を継承し、違ったデフォルト値を指定したり、
この入力メソッド用にカスタマイズ可能にしたりするためである。この場合に
は値は省略できる。

#if EXAMPLE_CODE
  <variable-list>
    <defvar id="precomposed">
      <description>
        <get-text>Flag to tell whether or not to generate precomposed characters.
                  If 1, generate precomposed characters if available (e.g. "ྲྀ"(U+0F76).
                  If 0, generate only decomposed characters (e.g. "ྲྀ" (U+0FB2 U+0F80).</get-text>
      </description>
      <integer>0</value>
      <possible-value>
        <integer>0</value>
        <integer>1</value>
      </possible-value>
    </defvar>
  </variable-list>
#endif

このコードは、変数 "precomposed" を宣言している。取り得る値は 0 か1 で
あり、初期値は 0 である。

@verbatim

<define name="command-list">
  <element name="command-list">
    <oneOrMore>
      <element name="defcmd">
	<attribute name="cname">
	  <data type="ID"><param name="pattern">command-.*</param></data></attribute>
	<optional>
	  <ref name="description"/>
	</optional>
	<zeroOrMore><ref name="keyseq"/></zeroOrMore>
      </element>
    </oneOrMore>
  </element>
</define>

<define name="keyseq">
  <element name="keyseq">
    <oneOrMore>
      <choice>
	<ref name="strterm"/>
	<ref name="listterm"/>
      </choice>
      </oneOrMore>
  </element>
</define>
@endverbatim

&lt;command-list&gt; は、この入力メソッドで使用されるコマンドを宣言する。
コマンドをデフォルトキーシーケンスに割り当てたり、ユーザがカスタマイズ
したりする場合には、ここで宣言されなくてはならない。
各 &lt;defcmd&gt; はコマンドを一つ宣言する。コマンドは属性
"cname" で参照され、その値は "command-" で始まらなくてはならない。
&lt;keyseq&gt; は１個以上の listerm か stringterm を含む。

&lt;variable-list&gt; 同様、この宣言は二通りに利用される。一つめは新し
いコマンドを導入するためであり、この場合 &lt;defcmd&gt; 中の
&lt;keyseq&gt; エレメントは省略できない。もう一つは "global.mimx" で宣
言されたコマンドを継承し、違ったキーバインディングを指定したり、この入
力メソッド用にカスタマイズ可能にしたりするためである。この場合には
&lt;keyseq&gt; は省略可能である。

#if EXAMPLE_CODE
   <command-list>
    <defcmd cname="command-commit">
      <description>
        <get-text>Commit
Commit the preedit text</get-text>
      </description>
      <keyseq><list><symbol>Return</symbol></list></keyseq>
      <keyseq><list><symbol>Linefeed</symbol></list></keyseq>
    </defcmd>
   </command-list>
#endif

@verbatim
<define name="module-list">
  <element name="module-list">
    <oneOrMore>
      <element name="module">
	<attribute name="id"><data type="string"/></attribute>
	<oneOrMore>
	  <element name="defun">
	    <attribute name="fname">
	      <data type="ID"><param name="pattern">.*-function-.*</param></data>
	    </attribute>
	    <empty/>
	  </element>
	</oneOrMore>
      </element>
    </oneOrMore>
  </element>
</define>
@endbatim

各 &lt;module&gt; エレメントは一つの外部モジュール (動的ライブラリ)を宣
言し、属性 "id" は外部モジュールの名前を表す。

&lt;defun&gt; エレメントはモジュールによってエクスポートされている関数
名を示す。属性 "fname" の値は、モジュール名, "-function-", 関数名を繋げ
たものである。属性 "fname" の値が "-init" で終れば、その関数はこの入力
メソッド用の入力コンテクストが生成される際に、デフォルトの引数 参照) の
みとともに呼ばれる。 "-fini" で終れば、 入力コンテクストが破壊される際
に、デフォルトの引数のみとともに呼ばれる。

#if EXAMPLE_CODE
  <module-list>
    <module id="libmimx-anthy">
      <defun fname="libmimx-anthy-function-convert"/>
      <defun fname="libmimx-anthy-function-resize"/>
      <defun fname="libmimx-anthy-function-change"/>
      <defun fname="libmimx-anthy-function-commit"/>
      <defun fname="libmimx-anthy-function-init"/>
      <defun fname="libmimx-anthy-function-fini"/>
    </module>
  </module-list>
#endif

このコードは外部モジュール "libmimx-anthy" を宣言する。この外部モジュー
ル は６つの関数をエクスポートしている。

外部モジュールの関数は、&lt;funcall&gt; で呼ぶことができる。関数は、
NULL かあるいは実行するべき &lt;funcall&gt; を示すリストを返す。

#if EXAMPLE_CODE
    <funcall fname="libmimx-anthy-function-resize">
       <symbol>t</symbol>
    </funcall>
#endif

このコードはモジュール 'libmimx-anthy' の関数 'resize' を引数
"t" で呼ぶ。

@verbatim
<define name="macro-list">
  <element name="macro-list">
    <oneOrMore>
      <ref name="defun"/>
    </oneOrMore>
  </element>
</define>
@endbatim

&lt;macro-list&gt; はこの入力メソッドで使用されるマクロを宣言する。
&lt;defun&gt; エレメントの詳細については @ref expr を参照。


#if EXAMPLE_CODE
  <macro-list>
    <defun fname="macro-delete-preceding-zw">
      <cond>
        <list>
          <logior>
            <eq><char-at><marker>@-1</marker></char-at><integer>0x200C</integer></eq>
            <eq><char-at><marker>@-1</marker></char-at><integer>0x200D</integer></eq>
          </logior>
          <delete><marker>@-1</marker></delete>
          <funcall fname="macro-delete-preceding-zw"/>
        </list>
      </cond>
    </defun>
  </macro-list>

#endif

このコードはマクロ "macro-delete-preceding-zw" を宣言する。


@subsection im-terms 入力メソッドの項(term)

m17n データベースには、入力メソッドを記述するための特別な項(term)である
マーカ、セレクタ、キーシークエンスが定義されている。

@verbatim
<define name="term" combine="choice">
  <choice>
    <ref name="keyseq"/>
    <ref name="marker"/>
    <ref name="selector"/>
  </choice>
</define>
@endverbatim

これらの項はmimnew.rngで定義された関数内で用いられる。

@verbatim
<define name="marker">
  <element name="marker"><data type="string"/></element>
</define>
@endverbatim

マーカは preediting バッファ中での文字の位置を示すシンボルである。
&lt;mark&gt; はマーカを特定の位置に設定する。&lt;move&gt;,
&lt;char-at&gt;, &lt;delete&gt; はマーカの位置を参照する。

@@ で始まるマーカは特別な意味を持つ。@@0, @@1, ... , @@9は、それぞれ
preediting バッファ中で 0 番目, 1番目, ... , 9番目の位置を示す。
@@&lt;, @@=, @@&gt;, @@-, @@+はそれぞれ preediting バッファ中で最初の、
現在の、最後の、直前の、直後の位置を示す。@@[ は候補リストが変化する前
の位置、@@] は候補リストが変化する際の次の位置を示す。

@@+N と @@-N (N は正の整数) は N個前あるいは後の位置を示し、preediting
バッファ内外の文字を指し示すために用いる。preediting バッファ中の前ある
いは後の文字がN個より少なければ、入力スポットから数えて(N-バッファ中の
前後の文字数)文字前あるいは後の位置を示す。

これら以外のマーカは @@ で始まってはならない。

#if EXAMPLE_CODE
 <delete><marker>@&lt;<marker></delete>
#endif

このコードは、バッファの最初の位置と現在の位置の間の文字を削除する。

#if EXAMPLE_CODE
 <move><marker>T</marker></move>
#endif

このコードは、マーカをユーザ定義の位置 T へ移動する。

#if EXAMPLE_CODE
  <char-at><marker>@-5</marker></char-at>
#endif

このコードは５文字前の文字を、preediting バッファ中であるかどうかにかか
わらず、参照する。

@verbatim
<define name="markerterm">
  <choice>
    <ref name="marker"/>
    <ref name="funcall"/>
    <ref name="varref"/>
  </choice>
</define>
@endverbatim

&lt;markerterm&gt; は、マーカを値としてもつ項である。すなわち、
&lt;varref&gt; が &lt;markerterm&gt; として現れれば、その値はマーカでな
くてはならず、 &lt;funcall&gt; が &lt;markerterm&gt; として現れれば、そ
れはマーカを返さなくてはならない。

@verbatim
<define name="selector">
  <element name="selector">
    <choice>
	<value>@first</value>
	<value>@current</value>
	<value>@last</value>
	<value>@previous</value>
	<value>@next</value>
	<value>@previous-candidate-change</value>
	<value>@next-candidate-change</value>
    </choice>
  </element>
</define>
@endverbatim

セレクタは候補リスト中の位置を示し、&lt;select&gt; エレメント中で用いら
れる。@@first, @@current, @@last はそれぞれ、最初の、現在の、最後の候補
を指す。@@previous は前の候補を指す。もし今の候補が今の候補グループ中で
の最初のものであれば、前の候補グループの最後の候補を指す。@@next は次の
候補を指す。もし今の候補が今の候補グループ中での最後のものであれば、次
の候補グループの最初の候補を指す。@@previous_candidate_list と
@@next_candidate_list は、それぞれ前と後の候補グループ中で、今の候補と
同じ候補インデックスを持つものを指す。

&lt;select&gt; は内容として整数値をとることもできる。整数 N は、候補リスト中の
N番目の位置を表す。

#if EXAMPLE_CODE
  <select><selector>@previous</selector></select>
#endif

このコードは直前の候補を選択する。

@verbatim
<define name="selectorterm">
  <choice>
    <ref name="selector"/>
    <ref name="funcall"/>
    <ref name="varref"/>
  </choice>
</define>
@endverbatim

&lt;selectorterm&gt; は、セレクタを値としてもつ項である。すなわち、
&lt;varref&gt; が &lt;selectorterm&gt; として現れれば、その値はセレクタ
でなくてはならず、 &lt;funcall&gt; が &lt;selectorterm&gt; として現れれ
ば、それはセレクタを返さなくてはならない。

@verbatim
<define name="keyseq">
  <element name="keyseq">
    <oneOrMore>
      <choice>
	<ref name="strterm"/>
	<ref name="listterm"/>
      </choice>
      </oneOrMore>
  </element>
</define>
@endverbatim

&lt;keyseq&gt; エレメント中の &lt;strterm&gt は、キーボードから生成でき
る文字で構成される。すなわち通常 ASCII 文字のみを含む。しかし、入力メソッ
ドがたとえば西ヨーロッパ用キーボードを使うことを想定したものであれば、
Latin-1 文字を含んでもよい。

&lt;keyseq&gt; エレメント中の &lt;listterm&gt の各要素は、有効な文字コー
ドを値として持つ&lt;intterm&gt; であるか、エレメントの内容は、関数
minput_event_to_key () の戻り値である&lt;symterm&gt; でなくてはならない。
X ウィンドウシステムの元では、 @c xev コマンドを用いて値を簡単にチェッ
クできる。たとえば、 リターンキー、バックスペースキー、キーパッドの0の
キーなどは、それぞれ@c Return , @c BackSpace , @c KP_0 としてあらわされ
る。シフト、コントロール、メタ、アルト、スーパー、ハイパーも押されてい
る場合には、それぞれS- , C- , M- , A- , s- , H- が前にこの順に置かれる。
したがって "リターンキーをシフトしてメタしてハイパーしたもの" は@c
(S-M-H-Return) である。"a をシフト" から "z をシフト" までは、単に A か
ら Z として表されることに注意。したがって、 "a をシフトしてメタしてハイ
パーしたもの" は @c M-H-A となる。

#if EXAMPLE_CODE
<keyseq>
   <list>
      <integer>0x6F</integer>
      <symbol>S-@</symbol>
   </list>
</keyseq>

<keyseq><string>ma</string></keyseq>
#endif

これらは二つとも正しい入力シークエンスである。

@verbatim
<define name="keyseqterm">
  <choice>
    <ref name="keyseq"/>
    <ref name="funcall"/>
    <ref name="varref"/>
  </choice>
</define>
@endverbatim

&lt;keyseqterm&gt; は、キーシークエンスを値としてもつ項である。すなわち、
&lt;varref&gt; が &lt;keyseqterm&gt; として現れれば、その値はキーシーク
エンスでなくてはならず、 &lt;funcall&gt; が &lt;keyseqterm&gt; として現
れれば、それはキーシークエンスを返さなくてはならない。


@subsection immap 入力メソッドのマップとルール

@verbatim
<define name="map-list">
 <element name="map-list">
  <oneOrMore>
    <element name="map">
      <attribute name="mname">
	<data type="ID"><param name="pattern">map-.*</param></data>
      </attribute>
      <zeroOrMore>
	<element name="rule">
	  <choice>
	    <ref name="keyseq"/>
	    <ref name="command-reference"/>
	  </choice>
	  <zeroOrMore><ref name="funcall"/></zeroOrMore>
	</element>
      </zeroOrMore>
    </element>
  </oneOrMore>
 </element>
</define>

@endverbatim

&lt;map-list&gt; はこの入力メソッドで使用されるマップを宣言する。
&lt;map&gt; エレメントは類似のルールをまとめて名付け、入力メソッドの状
態遷移を記述を容易にする。属性"mname" が &lt;map&gt; の名前を示す。

&lt;rule&gt; エレメントが、入力シークエンス&lt;keyseq&gt; (または
&lt;command&gt;) と入力メソッドドライバが実行する関数との対応を定義する。
たとえばあるルールは、特定の入力キーを受け取った際、入力メソッドに適切
な文字を挿入させる。

#if EXAMPLE_CODE
  <map-list>
    <map mname="map-consonant">
      <rule><keyseq><string>k</string></keyseq><insert><string>ཀ</string></insert></rule>
      <rule><keyseq><string>kh</string></keyseq><insert><string>ཁ</string></insert></rule>
          :         :
      <rule><keyseq><string>a</string></keyseq><insert><string>ཨ</string></insert></rule>
    </map>
    <map mname="map-standard-stack">
           :         :
    </map>
           :         :
  </map-list>
#endif

@verbatim
<define name="command-reference">
  <element name="command">
      <attribute name="cname"><data type="IDREF"/></attribute>
  </element>
</define>
@endverbatim

&lt;command-reference&gt; エレメントは、同じ"cname"を持つ
&lt;defcmd&gt; 中の&lt;keyseq&gt; がその位置に現れた場合と同じ効果を持
つ。

#if EXAMPLE_CODE
<command-reference cname="command-start"/>
#endif

このコードはコマンド "commad-start" を呼ぶ。

@subsection imfuncalls 入力メソッドの関数

expr.rng 中で定義されているものに加えて、m17n データベースでは入力メソッ
ドを記述するためにいくつかの関数を用意している。

@verbatim
<define name="funcall" combine="choice">
  <choice>
    <element name="insert"><choice><ref name="intterm"/><ref name="strterm"/></choice></element>
@endverbatim

&lt;insert&gt; エレメントは文字または M-text を現在の位置の前に挿入する。
&lt;insert&gt; の内容が &lt;strterm&glt;であれば、その値は挿入するべき
M-text である。&lt;intterm&glt;であれば、その値は挿入するべき文字のコー
ドである。挿入によってマーカの位置は自動的に変更される。


#if EXAMPLE_CODE
<insert><string>á</string></insert>
<insert><integer>225</integer></insert>
<insert><integer>0x00E1</integer></insert>
#endif

これらのコードはいずれも同じ文字 "á" を挿入する。

@verbatim
    <element name="insert-candidates">
      <oneOrMore><choice><ref name="listterm"/><ref name="strterm"/></choice></oneOrMore>
    </element>
@endverbatim

&lt;insert-candidates&gt; エレメントは、現在の位置の直前に挿入される文
字や文字列の候補を指定する。

内容が &lt;listterm&gt; であれば、リストの各要素が挿入の候補となる文字
列である。&lt;strterm&gt; であれば、その文字列中の各文字が候補である。
&lt;insert-candidates&gt; は現在の位置の前に最初の候補を挿入する。挿入
された文字や文字列には、候補リストと現在選択中の候補を表す情報が付加さ
れている。

#if EXAMPLE_CODE
<insert><string>＄￠￡￥￦</string></insert>

<insert><list>
	 <string>a</string>
	 <string>ā</string>
	 <string>á</string>
	 <string>ǎ</string>
	 <string>à</string>
</list></insert>
#endif

これらのコードはそれぞれ文字 ＄ と文字列 a を挿入し、それに全体のリスト
を関連づける。

@verbatim
    <element name="delete"><choice><ref name="markerterm"/><ref name="intterm"/></choice></element>
@endverbatim

&lt;markerterm&gt; が与えられれば、このエレメントは、現在の位置と指定の
マーカの間の文字を削除する。

#if EXAMPLE_CODE
<delete><marker>@-</marker></delete>
#endif

このコードは一つ前の位置から現在の位置までの文字を削除する。

&lt;intterm&gt; が与えられれば、それを文字位置として、その文字位置と現
在の位置の間の文字を削除する。

削除によってマーカの位置は自動的に変更される。

@verbatim
    <element name="select"><choice><ref name="selectorterm"/><ref name="intterm"/></choice></element>
@endverbatim

&lt;select&gt; エレメントはまず、現在の位置の直前の文字列が、候補リスト
が付加されている文字列に属すかどうかを調べる。そうであれば、その文字列
を &lt;selectorterm&gt; か &lt;intterm&gt; によって指定された候補に入れ
換える。&lt;intterm&gt; が与えられた場合、その値はリスト中の順番を示す。

#if EXAMPLE_CODE
<select><selector>@first</selector></select>
<select><integer>0</integer></select>
#endif

これらのコードはいずれもリストの最初の候補を選択する。

@verbatim
    <element name="show-candidates"><empty/></element>
@endverbatim

&lt;show-candidates&gt; エレメントは、現在の位置の前にある文字列に付加
されている候補リストを示すよう入力メソッドドライバに指示する。

@verbatim
    <element name="hide-candidates"><empty/></element>
@endverbatim

&lt;hide-candidates&gt; エレメントは、現在示されている候補リストを隠す
よう入力メソッドドライバに指示する。

@verbatim
    <element name="move"><choice><ref name="markerterm"/><ref name="intterm"/></choice></element>
@endverbatim

&lt;move&gt; エレメントは現在の位置を移動する。  &lt;markerterm&gt; が
与えられれば、その位置に移動する。&lt;intterm&gt; が与えられれば、その
値を文字位置として扱い、そこへ現在の位置を移動する。

#if EXAMPLE_CODE 
<move><marker>@@&lt</marker></move>
<move><integer>0</integer></move> 
#endif

これらのコードはいずれもバッファの最初の位置へ現在の位置を移動する。

@verbatim
    <element name="mark"><ref name="markerterm"/></element>
@endverbatim

&lt;mark&gt; エレメントは、指定のマーカを現在の位置に設定する。

#if EXAMPLE_CODE
<mark><marker>M</marker></mark>
#endif

このコードは現在の位置にマーカ "M" を置く。

@verbatim
    <element name="pushback"><choice><ref name="keyseqterm"/><ref name="intterm"/></choice></element>
@endverbatim

&lt;pushback&gt; エレメントはキーイベントをイベントキューに差し戻す。
&lt;keyseqterm&gt; が与えられれば、指定されたキーイベントを差し戻す。
&lt;intterm&gt; が与えられる場合にはその値は負であってはならない。正の
整数 N であれば N 個のイベントを差し戻す。０ならばすべて差し戻す。

#if EXAMPLE_CODE
<pushback><keyseq>b</keyseq></pushback>
#endif

このコードはキー "b" を戻す。

@verbatim
    <element name="pop"><empty/></element>
@endverbatim

&lt;pop&gt; エレメントはまだ処理されていない最初のイベントをイベント
キューから取り出し破棄する。

@verbatim
    <element name="undo"><optional><ref name="intterm"/></optional></element>
@endverbatim

&lt;undo&gt; エレメントは、&lt;intterm&gt; が無いばあいには最新の二つの
キーイベント、すなわちこのコマンドによって引き起こされたものとその直前
のもの、をキャンセルする。&lt;intterm&gt; が与えられる場合には、その値
は０であってはならない。値が正の整数 N ならば、N個めから最新のものまで
を キャンセルする。負の整数 -N ならば、最新の N 個のイベントをキャンセ
ルする。

#if EXAMPLE_CODE
<undo target-of-undo="-1"/>
#endif

このコードは最新のイベントのみをキャンセルする。

@verbatim
    <element name="commit"><empty/></element>
@endverbatim

&lt;commit&gt; エレメントは現在の preediting テキストを明示的にコミッ
トする。現在の preediting テキストは、入力メソッドドライバが最初の
&lt;state&gt;に遷移するたびにも、コミットされる。(@ref imstate 参照。）

@verbatim
    <element name="unhandle"><empty/></element>
@endverbatim

&lt;unhandle&gt; エレメントは現在の preediting テキストをコミットし、
最新のキーを未処理として返す。


@verbatim
    <element name="shift"><ref name="symterm"/></element>
    <element name="shiftback"><empty/></element>
@endverbatim

&lt;shift&gt; エレメントは現在のステート (@ref imstate 参照) を与えられ
た &lt;symterm&gt; で指定されたものに遷移させる。&lt;symterm&gt; の値は
&lt;state-list&gt; に現れるものでなくてはならない。&lt;shiftback&gt; エ
レメントは現在のステート を直前のものに遷移させる。

@verbatim
    <element name="char-at"><ref name="markerterm"/></element>
@endverbatim

&lt;char-at&gt; エレメントは、与えられた&lt;markerterm&gt;の位置にある
preediting テキストか surrounding テキスト中の文字の文字コードである整
数値&lt;integer&gt;C&lt;/integer&gt;を返す。

@verbatim
    <element name="key-count"><empty/></element>
@endverbatim

&lt;key-count&gt; エレメントは、現在処理している文字の数を表す整数値
&lt;integer&gt;N&lt;/integer&gt; を返す。

@verbatim
    <element name="surrounding-text-flag"><empty/></element>

  </choice>
</define>
@endverbatim

&lt;surrounding-text-flag&gt; はsurrounding テキストをサポートしていれ
ば&lt;integer&gt;1&lt;/integer&gt; を、そうでなければ
&lt;integer&gt;0&lt;/integer&gt; を返す。

@subsection imstate 入力メソッドの状態と遷移

@verbatim
      
@verbatim
      
<define name="state-list">
  <element name="state-list">
    <zeroOrMore>
      <element name="state">
	<attribute name="sname">
	  <data type="ID"><param name="pattern">state-.*</param></data>
	</attribute>
	<optional><element name="title"><data type="string"/></element></optional>
	<interleave>
	<optional>
	  <element name="state-hook">
	    <oneOrMore><ref name="funcall"/></oneOrMore>
	  </element>
	</optional>
	<optional>
	  <element name="catch-all-branch">
	    <zeroOrMore><ref name="funcall"/></zeroOrMore> 
	  </element>
	</optional>
	<zeroOrMore>
	  <element name="branch">
	    <attribute name="mname">
		<data type="IDREF"/>
	    </attribute>
	    <zeroOrMore><ref name="funcall"/></zeroOrMore>
	  </element>
	</zeroOrMore>
	</interleave>
      </element>
    </zeroOrMore>
  </element>
</define>

@endverbatim

The input method driver is always in one of the &lt;state&gt;s of an
&lt;input-method&gt; and may transit to another &lt;state&gt; when
processing an input.  The same input sequence can trigger different
&lt;funcall&gt;s and produce different results in different
&lt;state&gt;s.

入力メソッドドライバは常に一つの &lt;state&gt; にあり、入力を処理するこ
とによって別の &lt;state&gt; に遷移することがある。異なる&lt;state&gt;
では、同じ入力でも異なる&lt;funcall&gt; を呼び、異なる結果を得ることが
ある。

属性 "sname" が &lt;state&gt; の名前を示す。&lt;state&gt; エレメントの
子要素である &lt;title&gt;エレメントの内容は、入力メソッドがこの状態に
ある時スクリーン上に表示されるテキストである。省略されている場合には
&lt;input-method&gt; の子要素である &lt;title&gt; エレメントの内容が用
いられる。

入力コンテクストが生成された、すなわち入力メソッドが起動された時点では
入力メソッドドライバは&lt;state-list&gt; エレメント中の最初の
&lt;state&gt; にある。

各 &lt;state&gt; は0以上の &lt;branch&gt;を持つ。各&lt;branch&gt; は
&lt;map-list&gt; 中の各 &lt;map&gt のうち、属性"mname" の値が
&lt;branch&gt; の属性 "mname" の値と同じであるものに対応している。入力
シークエンスがある&lt;map&gt; 中の &lt;rule&gt; の &lt;keyseq&gt; (また
は&lt;command-reference&gt;) 部分に合致すると、対応する &lt;branch&gt;
が選択される。入力メソッドドライバはまずその &lt;rule&gt; の
&lt;funcall&gt; を、次いでその &lt;branch&gt; の &lt;funcall&gt; を実行
し、その後その &lt;state&gt; の初期状態に戻る。

入力メソッドドライバは、最初の &lt;state&gt; の初期状態になる度に
preeditバッファ中の全ての文字をコミットし、preeditバッファを空にする。
（&lt;commit&gt; エレメントが指定されていなくても。）

&lt;state-hook&gt; エレメント (省略可能) は、入力メソッドドライバがこの
&lt;state&gt; に遷移した時点で実行される&lt;funcall&gt; を指定する。

入力メソッドの入力コンテクストを生成した時点で、入力メソッドは
&lt;state-list&gt; の最初の &lt;state&gt; に遷移するため、その
&lt;state&gt; の &lt;state-hook&gt; 中の &lt;funcall&gt; が実行される。

入力シークエンスが、その時点の &lt;state&gt; のいずれの &lt;branch&gt;
にも合致しない場合には、

   @li &lt;catch-all-branch&gt; エレメントが存在すれば、
      &lt;catch-all-branch&gt;中の&lt;funcall&gt;を実行する。
   @li &lt;catch-all-branch&gt; がなければ、
       入力メソッドは初期状態に遷移する。     

#if EXAMPLE_CODE

  <state-list>
    <state sname="state-init">
      <branch mname="map-consonant">
        <shift><symbol>state-second</symbol></shift>
      </branch>
      <branch mname="map-independent"/>
    </state>
    <state sname="state-second">
      <branch mname="map-underscore">
        <shift><symbol>state-init</symbol></shift>
      </branch>
      <branch mname="map-dependent">
        <shift><symbol>state-init</symbol></shift>
      </branch>
      <branch mname="map-ry"/>
    </state>
  </state-list>
#endif

このコードはある入力メソッドでの状態遷移を定義している。この入力メソッ
ドでの&lt;state&gt;は、"state-init" と "state-second" の２つである。
"state-init" には2つの &lt;branch&gt; があり、それぞれ"map-consonant",
"map-independent" に対応する。"map-consonant" に属す入力シークエンスが
与えられると、それに対応する &lt;rule&gt; 中の &lt;funcall&gt;s を実行
した後"state-second" へ遷移する。"state-second"には、3つの
&lt;branch&gt; があり、それらのうち2つはとそれ以外の全ての入力を処理す
る最後に "state-init" への遷移を実行する。

@verbatim
</grammar>
@endverbatim


入力メソッド定義用の RelaxNG スキーマは、&lt;/grammar&gt; で終わる。

@section im-seealso SEE ALSO

@ref mim-list "Input Methods provided by the m17n database",
@ref mdbGeneral "mdbGeneral(5)"
*/

/* 
Copyright (C) 2003, 2004, 2005, 2009
  National Institute of Advanced Industrial Science and Technology (AIST)
  Registration Number H15PRO112

This file is part of the m17n database; a sub-part of the m17n
library.

The m17n library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation; either version 2.1 of
the License, or (at your option) any later version.

The m17n library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with the m17n library; if not, write to the Free
Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA.
*/

/* Local Variables: */
/* coding: utf-8 */
/* End: */
