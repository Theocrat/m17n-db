;; vi-telex.mim -- Input method for Vietnames with TELEX key sequence
;; Copyright (C) 2003, 2004, 2005, 2006, 2007
;;   National Institute of Advanced Industrial Science and Technology (AIST)
;;   Registration Number H15PRO112

;; This file is part of the m17n database; a sub-part of the m17n
;; library.

;; The m17n library is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1 of
;; the License, or (at your option) any later version.

;; The m17n library is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with the m17n library; if not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

(input-method vi telex)

(description "Vietnames input method using the TELEX key sequence.
Typing Backslash ('\\') toggles the normal mode and English mode.
The following variables are customizable:
  tone-mark-on-last: control tone mark position in equivocal cases
  backspace-is-undo: control the action of Backspace key (delete or undo)")

(title "Ắ")

(variable
 (tone-mark-on-last
  "Flag to control tone mark position in equivocal cases.
If this variable is 0 (the default), put tone mark on the first vowel
in such equivocal cases as \"oa\", \"oe\", \"uy\".
Otherwise, put tone mark on the last vowel."
  0 0 1)

 (backspace-is-undo
  "Flag to control the action of Backspace key (delete or undo).
If this variable is 0 (the default), Backspace key deletes the previous
character (e.g. \"q u a i s BS\" => \"quá\").
If the value is 1, Backspace key undoes the previous key
\(e.g. \"q u a i s BS\" => \"quai\")."
  0 0 1))

(macro
 (handle-mark
  (delete @-)
  ;; At first, cancel the tone mark if already put.
  (move T) (select 0)
  (move M)
  (cond (V-3
	 ;; Tripple-vowel
	 ;; Put a tone mark on the last vowel if it is ê, or ơ.
	 ;; Otherwise put a tone mark on the second vowel.
	 (cond ((| (= V-1 ?ê) (= V-1 ?ơ) (= V-1 ?Ê) (= V-1 ?Ơ)))
	       (1 (move @-))))
	(V-2
	 ;; Double-vowel
	 ;; Put a tone mark on the last vowel in the following cases:
	 ;;  * The last vowel is  â, ă, ê, ô, ơ, ư, or ư (i.e. non-ASCII).
	 ;;  * The initial consonant and the first vowel is "gi" or "qu".
	 ;;  * tone-mark-on-last is customized to 1 in such equivocal
	 ;;    cases as "oa", "oe", "oo", and "uy".
	 ;; Otherwise put a tone mark on the first vowel.
	 (cond ((| (> V-1 127)
		   (& (| (= C ?g) (= C ?G)) (| (= V-2 ?i) (= V-2 ?I)))
		   (& (| (= C ?q) (= C ?Q)) (| (= V-2 ?u) (= V-2 ?U)))
		   (& (| tone-mark-on-last C-AFTER-V)
		      (| (& (| (= V-2 ?o) (= V-2 ?O))
			    (| (= V-1 ?a) (= V-1 ?A) (= V-1 ?e) (= V-1 ?E)
			       (= V-1 ?o) (= V-1 ?O)))
			 (& (| (= V-2 ?u) (= V-2 ?U))
			    (| (= V-1 ?y) (= V-1 ?Y)))))))
	       (1 (move @-)))))
  (select SELECT)
  (mark T)
  (move @>)))

(map
 (vowel  ; sfrxj
  ("a"  ("aáàảãạ")) ("A"  ("AÁÀẢÃẠ"))
  ("e"  ("eéèẻẽẹ")) ("E"  ("EÉÈẺẼẸ"))
  ("i"  ("iíìỉĩị")) ("I"  ("IÍÌỈĨỊ"))
  ("o"  ("oóòỏõọ")) ("O"  ("OÓÒỎÕỌ"))
  ("u"  ("uúùủũụ")) ("U"  ("UÚÙỦŨỤ"))
  ("y"  ("yýỳỷỹỵ")) ("Y"  ("YÝỲỶỸỴ"))
  ("aa" ("âấầẩẫậ")) ("AA" ("ÂẤẦẨẪẬ")) ("Aa" ("ÂẤẦẨẪẬ"))
  ("aw" ("ăắằẳẵặ")) ("AW" ("ĂẮẰẲẴẶ")) ("Aw" ("ĂẮẰẲẴẶ"))
  ("ee" ("êếềểễệ")) ("EE" ("ÊẾỀỂỄỆ")) ("Ee" ("ÊẾỀỂỄỆ"))
  ("oo" ("ôốồổỗộ")) ("OO" ("ÔỐỒỔỖỘ")) ("Oo" ("ÔỐỒỔỖỘ"))
  ("ow" ("ơớờởỡợ")) ("OW" ("ƠỚỜỞỠỢ")) ("Ow" ("ƠỚỜỞỠỢ"))
  ("uw" ("ưứừửữự")) ("UW" ("ƯỨỪỬỮỰ")) ("Uw" ("ƯỨỪỬỮỰ"))
  ("w"  ("ưứừửữự")) ("W"  ("ƯỨỪỬỮỰ"))
  ("ooo" ("oóòỏõọ") ("oóòỏõọ") (set V-2 V-1) (set V-1 ?o))
  ("OOO" ("OÓÒỎÕỌ") ("OÓÒỎÕỌ") (set V-2 V-1) (set V-1 ?O))
  ("Ooo" ("OÓÒỎÕỌ") ("oóòỏõọ") (set V-2 V-1) (set V-1 ?O)))

 (tone-mark
  ("z" (set SELECT 0) ?z) ("Z" (set SELECT 0) ?Z)
  ("s" (set SELECT 1) ?s) ("S" (set SELECT 1) ?S)
  ("f" (set SELECT 2) ?f) ("F" (set SELECT 2) ?F)
  ("r" (set SELECT 3) ?r) ("R" (set SELECT 3) ?R)
  ("x" (set SELECT 4) ?x) ("X" (set SELECT 4) ?X)
  ("j" (set SELECT 5) ?j) ("J" (set SELECT 5) ?J))

 (consonant-or-tone-mark
  ("z" ?z) ("s" ?s) ("f" ?f) ("r" ?r) ("x" ?x) ("j" ?j)
  ("Z" ?Z) ("S" ?S) ("F" ?F) ("R" ?R) ("X" ?X) ("J" ?J))

 (consonant
  ("b" ?b) ("c" ?c) ("d" ?d) ("g" ?g) ("h" ?h) ("k" ?k) ("l" ?l) ("m" ?m)
  ("n" ?n) ("p" ?p) ("q" ?q) ("t" ?t) ("v" ?v)
  ("dd" ?đ)
  ("B" ?B) ("C" ?C) ("D" ?D) ("G" ?G) ("H" ?H) ("K" ?K) ("L" ?L) ("M" ?M)
  ("N" ?N) ("P" ?P) ("Q" ?Q) ("T" ?T) ("V" ?V)
  ("DD" ?Đ) ("Dd" ?Đ))

 (temporary-escape
  ("aaa" "aa") ("AAA" "AA") ("Aaa" "Aa")
  ("eee" "ee") ("EEE" "EE") ("Eee" "Ee")
  ("ddd" "dd") ("DDD" "DD") ("Ddd" "Dd")
  ("ww" ?w) ("WW" ?W) ("Ww" ?W)
  ("zz" ?z) ("ZZ" ?Z) ("Zz" ?Z)
  ("ss" ?s) ("SS" ?S) ("Ss" ?S)
  ("ff" ?f) ("FF" ?F) ("Ff" ?F)
  ("rr" ?r) ("RR" ?R) ("Rr" ?R)
  ("xx" ?x) ("XX" ?X) ("Xx" ?X)
  ("jj" ?j) ("JJ" ?J) ("Jj" ?J))

 (alphabet
  ("a" ?a) ("b" ?b) ("c" ?c) ("d" ?d) ("e" ?e) ("f" ?f) ("g" ?g) 
  ("h" ?h) ("i" ?i) ("j" ?j) ("k" ?k) ("l" ?l) ("m" ?m) ("n" ?n)
  ("o" ?o) ("p" ?p) ("q" ?q) ("r" ?r) ("s" ?s) ("t" ?t) ("u" ?u)
  ("v" ?v) ("w" ?w) ("x" ?x) ("y" ?y) ("z" ?z)
  ("A" ?A) ("B" ?B) ("C" ?C) ("D" ?D) ("E" ?E) ("F" ?F) ("G" ?G) 
  ("H" ?H) ("I" ?I) ("J" ?J) ("K" ?K) ("L" ?L) ("M" ?M) ("N" ?N)
  ("O" ?O) ("P" ?P) ("Q" ?Q) ("R" ?R) ("S" ?S) ("T" ?T) ("U" ?U)
  ("V" ?V) ("W" ?W) ("X" ?X) ("Y" ?Y) ("Z" ?Z))

 (permanent-escape
  ("\\"))

 (backspace
  ((BackSpace) (cond (backspace-is-undo (undo))))))

(state
 (init
  ;; Initialize variables.  C is the initial consonant.  V-N is the
  ;; (N-1)th vowel from the last.  C-AFTER-V is a number of consonants
  ;; typed after vowel.
  (t (set C @-1) (set V-1 0) (set V-2 0) (set V-3 0) (set C-AFTER-V 0))

  (consonant (set C @-1))
  (consonant-or-tone-mark (set C @-1))

  ;; Mark M remembers the preedit position after the last vowel.
  (vowel (mark M) (set V-2 V-1) (set V-1 @-1) (shift after-v))
  (temporary-escape (shift temporary-escape))
  (permanent-escape (shift escape-in-normal-mode)))

 ;; The state shifted to when a vowel is typed.
 (after-v
  (consonant (shift after-vc))
  (vowel (mark M) (set V-3 V-2) (set V-2 V-1) (set V-1 @-1))
  (consonant-or-tone-mark (delete @-) (pushback 1) (shift after-t))
  (backspace (delete @-)
	     (cond (V-3 (set V-1 V-2) (set V-2 V-3) (set V-3 0))
		   (V-2 (set V-1 V-2) (set V-2 0))
		   (1 (shift init)))))

 ;; The state shifted to when a consonant is typed after a vowel.
 (after-vc
  (t (set C-AFTER-V 1))
  (consonant (add C-AFTER-V 1))
  (consonant-or-tone-mark (delete @-) (pushback 1) (shift after-t))
  (backspace (delete @-)
	     (sub C-AFTER-V 1)
	     (cond ((= C-AFTER-V 0) (shift after-v)))))

 ;; The state shifted to when a tone-mark is typed.
 (after-t
  (t (set CURRENT-SELECT -1))
  (tone-mark (cond ((= CURRENT-SELECT SELECT) (move T) (select 0) (move @>)
		    (shift temporary-escape))
		   (1 (handle-mark) (set CURRENT-SELECT SELECT))))
  (nil (cond (C-AFTER-V (shift after-vc))
	     (1 (shift after-v)))))

 (temporary-escape
  "en"
  (t (commit))
  (alphabet (commit)))

 (escape-in-normal-mode
  "EN"
  (permanent-escape (insert "\\") (shift init))
  ;; Any other key force shifting to permanent-escape.
  (nil (shift permanent-escape)))

 (permanent-escape
  "EN"
  (t (set ESCAPE 1))
  (permanent-escape (shift escape-in-permanent-escape))
  ;; Unhandle any characters.
  (nil (unhandle)))

 (escape-in-permanent-escape
  "Ắ"
  (permanent-escape (insert "\\") (commit) (shift permanent-escape))
  ;; Any other key force shifting to init
  ))

;; Local Variables:
;; coding: utf-8
;; mode: emacs-lisp
;; End:
